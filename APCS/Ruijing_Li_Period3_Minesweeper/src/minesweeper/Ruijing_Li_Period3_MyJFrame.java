/* Ruijing Li
 * Period 3
 * 4/3/14
 * Time Spent: 8 hours of debugging and making.
 * FINALLY DONE. Took a long long time, but finally got it working. Lots of bugs, debugging,
 * and stuff. Should work when run. Title changes whether you win or lose and you
 * click the board again to reset. Hopefully working properly. Also compiled using netbeans gui editor which
 * was of great help. All I have to say is 
 * SUCH GOOD MUCH FUN GG NO RE PL0X.
 */

package minesweeper;
import java.awt.*;
import javax.swing.*;
import java.net.URL;
import java.awt.event.*;
import java.io.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.util.*;

public class Ruijing_Li_Period3_MyJFrame extends javax.swing.JFrame implements MouseListener, ActionListener{
    private int buttonGrid[][] = new int[20][20];
    private int myX, myY, x, y, time, mines, numMines;
    private javax.swing.Timer timer;
    private JTextPane aboutPane, helpPane;
    private JScrollPane aboutScroll, helpScroll;
    private BufferedImage cellE, flag, question, mine;
    final static int FLAG = 1;
    final static int QUESTION = 2;
    final static int BLACK = 3;
    private boolean newgame, leftClick;
    private int[][] state = new int[20][20];
    private MySketchPad pad = new MySketchPad();
    private Random rand = new Random();
    private boolean[][] hiddenList = new boolean[20][20];
    private int[][] isNum = new int[20][20];
   
    
    /**
     * Creates new form NewJFrame
     */
    public Ruijing_Li_Period3_MyJFrame() {
        initComponents();
        createGUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        timeLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        mineLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newGame = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mineMenu = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Minesweeper");
        setBackground(new java.awt.Color(238, 238, 238));
        setMinimumSize(new java.awt.Dimension(500, 600));
        setName("jFrame1"); // NOI18N

        jPanel6.setBackground(new java.awt.Color(238, 238, 238));
        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.Y_AXIS));

        jPanel7.setBackground(new java.awt.Color(238, 238, 238));
        jPanel6.add(jPanel7);

        jPanel1.setBackground(new java.awt.Color(238, 238, 238));
        jPanel1.setMaximumSize(new java.awt.Dimension(400, 400));
        jPanel1.setMinimumSize(new java.awt.Dimension(400, 400));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jPanel1);
        jPanel1.getAccessibleContext().setAccessibleDescription("");

        jPanel2.setBackground(new java.awt.Color(238, 238, 238));

        jPanel4.setBackground(new java.awt.Color(238, 238, 238));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Time Elasped"));
        jPanel4.setMaximumSize(new java.awt.Dimension(130, 123));
        jPanel4.setMinimumSize(new java.awt.Dimension(130, 123));
        jPanel4.setPreferredSize(new java.awt.Dimension(130, 123));

        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeLabel.setText("0");
        timeLabel.setMaximumSize(new java.awt.Dimension(110, 80));
        timeLabel.setMinimumSize(new java.awt.Dimension(110, 80));
        timeLabel.setPreferredSize(new java.awt.Dimension(110, 80));
        jPanel4.add(timeLabel);

        jPanel2.add(jPanel4);

        jPanel3.setBackground(new java.awt.Color(238, 238, 238));
        jPanel3.setPreferredSize(new java.awt.Dimension(50, 100));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));
        jPanel2.add(jPanel3);

        jPanel5.setBackground(new java.awt.Color(238, 238, 238));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Mines"));
        jPanel5.setMaximumSize(new java.awt.Dimension(200, 200));
        jPanel5.setMinimumSize(new java.awt.Dimension(130, 123));
        jPanel5.setPreferredSize(new java.awt.Dimension(130, 123));

        mineLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mineLabel.setText("0");
        mineLabel.setMaximumSize(new java.awt.Dimension(110, 80));
        mineLabel.setMinimumSize(new java.awt.Dimension(110, 80));
        mineLabel.setPreferredSize(new java.awt.Dimension(110, 80));
        jPanel5.add(mineLabel);

        jPanel2.add(jPanel5);

        jPanel6.add(jPanel2);

        getContentPane().add(jPanel6, java.awt.BorderLayout.CENTER);

        jMenuBar1.setBackground(new java.awt.Color(238, 238, 238));

        jMenu1.setText("Game");

        newGame.setText("New Game");
        jMenu1.add(newGame);

        exitMenu.setText("Exit");
        jMenu1.add(exitMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");

        mineMenu.setText("Total Mines");
        jMenu2.add(mineMenu);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        helpMenu.setText("How to Play");
        jMenu3.add(helpMenu);

        aboutMenu.setText("About");
        jMenu3.add(aboutMenu);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ruijing_Li_Period3_MyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ruijing_Li_Period3_MyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ruijing_Li_Period3_MyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ruijing_Li_Period3_MyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
  
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ruijing_Li_Period3_MyJFrame().setVisible(true);
            }
        });
    }
    
    private void createGUI(){
        jPanel1.addMouseListener(this);
        timer = new javax.swing.Timer(1000, this);
        timeLabel.setText("" + time);
        mines = 30;
        numMines = mines;
        mineLabel.setText("" + mines);
        newGame.addActionListener(this);
        try{        
            helpPane = new JTextPane();
            helpPane.setPage(new URL("file:Ruijing_Li_Period3_howtoplay.html"));
            helpPane.setEditable(false);
            aboutPane = new JTextPane();
            aboutPane.setPage(new URL("file:Ruijing_Li_Period3_about.html"));
            aboutPane.setEditable(false);
        }catch(IOException e){
            e.printStackTrace();
        }
        
        helpPane.setPreferredSize(new Dimension(400, 400));
        aboutPane.setPreferredSize(new Dimension(200, 200));

        helpScroll = new JScrollPane(helpPane);
        helpScroll.setPreferredSize(new Dimension(400, 400));
        aboutScroll = new JScrollPane(aboutPane);
        aboutScroll.setPreferredSize(new Dimension(200, 200));
        helpMenu.addActionListener(this);
        aboutMenu.addActionListener(this);
        try{
            cellE = ImageIO.read(new File("emptyCell.png"));
            flag = ImageIO.read(new File("flagIcon.png"));
            question = ImageIO.read(new File("mark.png"));
            mine = ImageIO.read(new File("mines.png"));
        }catch(IOException e){
            e.printStackTrace();
        }
        exitMenu.addActionListener(this);
        mineMenu.addActionListener(this);
        jPanel1.add(pad);
        if(!timer.isRunning()){
            timer.start();
        }
        randomizeMines();
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        myX = e.getX()/20;
        myY = e.getY()/20;
        x = e.getX()- e.getX()%20;
    	y = e.getY()- e.getY()%20;
        
        if(e.getButton() == MouseEvent.BUTTON1){
            leftClick = true;
            searchMines(myX, myY);
            state[myY][myX] = BLACK;
            pad.repaint();
        }
        
        if(e.getButton() == MouseEvent.BUTTON3){
            if(state[myY][myX] == 0){
                state[myY][myX] = FLAG;
            }else if(state[myY][myX] == FLAG){
                state[myY][myX] = QUESTION;
            }else if(state[myY][myX]== QUESTION){
                state[myY][myX] = 0;
            }else if(state[myY][myX] == BLACK){
                ;
            }
            leftClick = false;
            pad.repaint();
        }
        
        if(newgame){
            for(int i = 0; i < 20; i++){
                for(int j = 0; j < 20; j++){
                    state[i][j] = 0;
                    buttonGrid[i][j] = 0;
                    isNum[i][j] = 0;
                    hiddenList[i][j] = false;
                }
            }
            randomizeMines();
            if(!timer.isRunning())
                timer.start();
            time = 0;
            setTitle("Minesweeper");
            newgame = false;
            pad.repaint();
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {     
    }

    @Override
    public void mouseReleased(MouseEvent e) {     
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void actionPerformed(ActionEvent e) {     
        if(e.getSource() == helpMenu){
             //Display the JScrollPane in a standard message dialog box
            JOptionPane.showMessageDialog(null, helpScroll, "How To Play", JOptionPane.PLAIN_MESSAGE, null);
        }
         if(e.getSource() == aboutMenu){
             //Display the JScrollPane in a standard message dialog box
            JOptionPane.showMessageDialog(null, aboutScroll, "About", JOptionPane.PLAIN_MESSAGE, null);
        }
        if(e.getSource() == exitMenu){
            dispose();
        }
        if(e.getSource() == mineMenu){
            mines = Integer.parseInt(JOptionPane.showInputDialog("Enter the number of mines"));
            if(mines > 400)
                mines = 400;
            
            numMines = mines;
            mineLabel.setText("" + mines);
            JOptionPane.showConfirmDialog(null, "This will restart your current game", "Message", JOptionPane.YES_NO_OPTION);
            setTitle("Minesweeper");
            for(int i = 0; i < 20; i++){
                for(int j = 0; j < 20; j++){
                    state[i][j] = 0;
                    buttonGrid[i][j] = 0;
                    isNum[i][j] = 0;
                    hiddenList[i][j] = false;
                }
            }
               
            randomizeMines();
            if(!timer.isRunning())
                timer.start();
          
            time = 0;
            
            pad.repaint();  
        }
        if(e.getSource() == newGame){
            
            mines = 30;
            numMines = mines;
            mineLabel.setText("" + mines);
            for(int i = 0; i < 20; i++){
                for(int j = 0; j < 20; j++){
                    state[i][j] = 0;
                    buttonGrid[i][j] = 0;
                    isNum[i][j] = 0;
                    hiddenList[i][j] = false;
                }
            }
            randomizeMines();
            if(!timer.isRunning())
                timer.start();
            
            time = 0;
            JOptionPane.showConfirmDialog(null, "Start new game?", "Message", JOptionPane.YES_NO_OPTION);
            setTitle("Minesweeper");
            
               
            pad.repaint();
        }
        if(e.getSource()== timer){
            timeLabel.setText("" + time);
            time++;
        }
    }
    
    private class MySketchPad extends JPanel {
        @Override
        public void paintComponent(Graphics g){                
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D)g;
             for(int i = 0; i < 20; i++){
                for(int j = 0; j < 20; j++){
                    if(buttonGrid[i][j] == 0)
                        g2.drawImage(cellE, 20*j, 20*i, null);
                }
             }
             
             
             
             for(int i = 0; i < 20; i++){
                for(int j = 0; j < 20; j++){
                    buttonGrid[i][j] = state[i][j];
                }
            }
            
             
            //storing 
            for(int i = 0; i < 20; i++){
                for(int j = 0; j < 20; j++){
                    if(buttonGrid[i][j] == 0)
                        g2.drawImage(cellE, 20*j, 20*i, null);
                    else if(buttonGrid[i][j] == BLACK){
                        g2.setColor(Color.darkGray);
                        //System.out.println("Ok2");
                        g2.fillRect(20*j, 20*i, 20, 20);
                        g2.setColor(Color.black);
                        g2.drawRect(20*j, 20*i, 20, 20);

                        if(isNum[i][j] > 0){
                            g2.setColor(Color.white);
                            g2.drawString("" + isNum[i][j], 20*j+5, 20*i+15);
                        }
                    }
                    else if(buttonGrid[i][j] == FLAG){
                        g2.drawImage(flag, x, y, null);
                    }
                    else if(buttonGrid[i][j] == QUESTION){
                        g2.drawImage(question, x, y, null);
                    }
                    
                }
            }
            
            if(state[myY][myX] == BLACK){
                g2.setColor(Color.darkGray);
                g2.fillRect(x, y, 20, 20);
                g2.setColor(Color.black);
                g2.drawRect(x, y, 20, 20);
                
                if(hiddenList[myY][myX]){
                    g2.drawImage(mine, x, y, null);
                }
                if(generateMines(myX, myY) != 0){
                    g2.setColor(Color.white);
                    g2.drawString("" + generateMines(myX, myY), x+5, y+15);
                }
            }
            else if(state[myY][myX] == FLAG){
                g2.drawImage(cellE, x, y, null);
                g2.drawImage(flag, x, y, null);
                mines--;
                mineLabel.setText("" + mines);
                
            }
            else if(state[myY][myX] == QUESTION){
                g2.drawImage(cellE, x, y, null);
                g2.drawImage(question, x, y, null);
                mines++;
                mineLabel.setText("" + mines);
            }
            else if(state[myY][myX] == 0){
                g2.drawImage(cellE, x, y, null);
            }
            
            for(int i = 0; i < 20; i++){
                for(int j = 0; j < 20; j++){
                    if(state[i][j] == FLAG){
                        g2.drawImage(cellE, 20*j, 20*i, null);
                        g2.drawImage(flag, 20*j, 20*i, null);
                    }else if(state[i][j] == QUESTION){
                        g2.drawImage(cellE, 20*j, 20*i, null);
                        g2.drawImage(question, 20*j, 20*i, null);
                    }
                }
            }
            
            if(hiddenList[myY][myX] && leftClick){
                setTitle("Game Over");
                timer.stop();
                for(int i = 0; i < 20; i++){
                    for(int j = 0; j < 20; j++){
                        if(hiddenList[i][j]){
                            g2.drawImage(mine, 20*j, 20*i, null);
                        }
                    }
                }
                
                newgame = true;
            }
            
            for(int i = 0; i < 20; i++){
                for(int j = 0; j < 20; j++){
                    buttonGrid[i][j] = state[i][j];
                }
            }
            
            if(win()){
                setTitle("You WIN!!!!");
                timer.stop();
                newgame = true;
            }
        } 
    }
    
    private boolean win(){
        int number = 0;
        for(int i = 0; i < 20; i++){
            for(int j = 0; j < 20; j++){
                if(state[i][j] == BLACK){
                    number++;
                }
            }
        }
        if(numMines != 400 && 400-number == numMines)
            return true;
        else return false;
    }
    
    private void randomizeMines(){
        int i = 0;
        for(int r = 0; r < 20; r++){
            for(int c = 0; c < 20; c++){
                hiddenList[r][c] = false;
            }
        }
        while(i != numMines){
            int x;
            int y;
            do{
                x = rand.nextInt(20);
                y = rand.nextInt(20);
            }
            while(hiddenList[y][x]);
            
            hiddenList[y][x] = true;
            
            
           if(isLegal(x-1, y)){
                isNum[y][x-1] = generateMines(x-1, y);
           }
           if(isLegal(x-1, y-1)){
                isNum[y-1][x-1]= generateMines(x-1, y-1);
           }
           if(isLegal(x-1, y+1))
                isNum[y+1][x-1]= generateMines(x-1, y+1);
           if(isLegal(x+1, y))
                isNum[y][x+1]= generateMines(x+1, y);
           if(isLegal(x+1, y-1))
                isNum[y-1][x+1]= generateMines(x+1, y-1);
           if(isLegal(x+1, y+1))
                isNum[y+1][x+1]= generateMines(x+1, y+1);
           if(isLegal(x, y-1))
                isNum[y-1][x]= generateMines(x, y-1);
           if(isLegal(x, y+1))
                isNum[y+1][x]= generateMines(x, y+1);   
           
            i++;
        }
    }
    
    private int generateMines(int myX, int myY){
        int counter = 0;
    	counter += getNeighbor(myX-1, myY);
    	counter += getNeighbor(myX-1, myY-1);
    	counter += getNeighbor(myX-1, myY+1);
    	counter += getNeighbor(myX+1, myY);
    	counter += getNeighbor(myX+1, myY-1);
    	counter += getNeighbor(myX+1, myY+1);
    	counter += getNeighbor(myX, myY-1);
    	counter += getNeighbor(myX, myY+1);
    	return counter;
    }
    
    private boolean isLegal(int x, int y){
        if(x >= 0 && x < 20 && y >= 0 && y < 20)
            return true;
        else
            return false;
    }
    
    
    private int getNeighbor(int x, int y){
    	if(isLegal(x, y)){
            if(hiddenList[y][x]){
                return 1;
            }
    	}

    	return 0;
    }
 
    private void searchMines(int myX, int myY){
        if(isLegal(myX, myY)){
            if(state[myY][myX] == 0){
                state[myY][myX] = BLACK;
                if(hiddenList[myY][myX]){
                }else if(isNum[myY][myX] != 0){
                }
                else if(!hiddenList[myY][myX] && isNum[myY][myX] == 0){
                    searchMines(myX-1, myY-1);
                    searchMines(myX, myY-1);
                    searchMines(myX+1, myY-1);
                    searchMines(myX+1, myY);
                    searchMines(myX+1, myY+1);
                    searchMines(myX, myY+1);
                    searchMines(myX-1, myY+1);
                    searchMines(myX-1, myY);
                }
            }    
        }
    }
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenu;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenuItem helpMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel mineLabel;
    private javax.swing.JMenuItem mineMenu;
    private javax.swing.JMenuItem newGame;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables
}
